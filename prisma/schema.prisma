// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["tracing"]
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESS_PRISMA_URL")
  directUrl = env("POSTGRESS_URL_NON_POOLING")
}

// model User {
//   id            Int      @id @default(autoincrement())
//   // createdAt     DateTime @default(now())
//   // email         String   @unique
//   // name          String?
//   // role          Role     @default(USER)
//   transaction   Transaction[]
//   category      Category[]
//   userSettings  UserSettings[]
//   monthHistory  MonthHistory[]
//   yearHistory   YearHistory[]
//   // profiles  Profile[]
// }

model UserSettings {
  currency  String 
  userId    String @id

  // id        Int      @id @default(autoincrement())
  // user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  createdAt DateTime @default(now())
  name      String
  type      String   @default("income")
  icon      String
  userId    String

  // id        Int      @id @default(autoincrement())
  // updatedAt DateTime @updatedAt
  // user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId, type])
}

model Transaction {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  amount        Float      
  description   String
  date          DateTime
  userId        String
  type          String @default("income")

  category      String
  categoryIcon  String

  // user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MonthHistory {
  day           Int
  month         Int      
  year          Int

  income        Float
  expanse       Float

  userId        String
  
  // createdAt     DateTime @default(now())
  // id            Int      @id @default(autoincrement())
  // updatedAt     DateTime @updatedAt
  // user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  // userId        Int?

  @@id([day, month, year, userId])
}

model YearHistory {
  userId        String

  month         Int      
  year          Int

  income        Float
  expanse       Float

  // createdAt     DateTime @default(now())
  // id            Int      @id @default(autoincrement())
  // updatedAt     DateTime @updatedAt
  // user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  // userId        Int?

  @@id([month, year, userId])
}

// model Profile {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   published Boolean  @default(false)
//   title     String   @db.VarChar(255)
//   user      User?    @relation(fields: [userId], references: [id])
//   userId    Int?
// }

// enum Role {
//   USER
//   ADMIN
// }